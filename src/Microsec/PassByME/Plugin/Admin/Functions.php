<?php
/**
 * @package passbyme-two-factor-authentication
 * @author  Microsec Ltd. <development@passbyme.com>
 * @copyright (c) 2017, Microsec Ltd.
 */

namespace PassByME\Plugin\Admin;

use PassByME\Methods\Management;
use PassByME\Methods\Messaging;
use PassByME\Plugin\Loader;
use PassByME\TwoFactor\Config;

class Functions {

	private $cipher;
	private $mode;
	private $ivSize;
	private $key;

	public function __construct() {
		$this->cipher = MCRYPT_RIJNDAEL_128;
		$this->mode   = MCRYPT_MODE_CBC;
		/** @noinspection PhpDeprecationInspection */
		$this->ivSize = mcrypt_get_iv_size( $this->cipher, $this->mode );
		$this->key    = hash( 'sha256', SECURE_AUTH_SALT, yes );
	}

	public function validateCertificate( $filename, $certPwd ) {
		$validPem = openssl_pkey_get_private( file_get_contents( $filename ), $certPwd );
		if ( $validPem !== false ) {
			$result = true;
		} else {
			throw new \Exception( 'Cannot read certificate file! Make sure you add the correct file and password!' );
		}

		return $result;
	}

	public function aesEncrypt( $string ) {
		/** @noinspection PhpDeprecationInspection */
		$iv = mcrypt_create_iv( $this->ivSize, MCRYPT_RAND );

		if ( ! $iv ) {
			throw new \Exception( 'Failed to create an initialization vector for encryption!' );
		}

		/** @noinspection PhpDeprecationInspection */
		$encryptedData = mcrypt_encrypt( $this->cipher, $this->key, $string, $this->mode, $iv );
		$encrypted     = base64_encode( $iv . $encryptedData );

		return $encrypted;
	}

	public function aesDecrypt( $encrypted ) {
		$decrypted = "";
		if ( $encrypted ) {
			$decoded    = base64_decode( $encrypted );
			$iv         = mb_substr( $decoded, 0, $this->ivSize, '8bit' );
			$cipherText = mb_substr( $decoded, $this->ivSize, null, '8bit' );
			/** @noinspection PhpDeprecationInspection */
			$decrypted = rtrim(
				mcrypt_decrypt( $this->cipher, $this->key, $cipherText, $this->mode, $iv ),
				"\0"
			);
		}

		return $decrypted;
	}

	public function uploadCertificate( $inputFileName, $inputPwdName, $type ) {
		// Handle request then generate response using echo or leaving PHP and using HTML
		if ( ! function_exists( 'wp_handle_upload' ) ) {
			require_once( ABSPATH . 'wp-admin/includes/file.php' );
		}

		$uploadedFile     = $_FILES[ $inputFileName ];
		$upload_overrides = array( 'test_form' => false );
		$certPwd          = filter_input( INPUT_POST, $inputPwdName );
		$moveFile         = wp_handle_upload( $uploadedFile, $upload_overrides );
		if ( $moveFile && ! isset( $moveFile['error'] ) ) {
			check_ajax_referer( 'ajax_file_nonce', 'security' );
			$filename      = $moveFile['file'];
			$wp_upload_dir = wp_upload_dir();
			$savedFile     = $wp_upload_dir['path'] . '/' . basename( $filename );
			if ( $certPwd ) {
				$this->validateCertificate( $filename, $certPwd );
				$loader = new Loader();
				$loader->addOptions(
					array(
						'pbm_2fa_message_title' => 'WordPress 2FA Login',
						'pbm_2fa_message'       => 'Trying to login to WordPress?',
						'pbm_2fa_timeout'       => 120,
						'pbm_2fa_auth_url'      => 'https://auth-sp.passbyme.com/frontend',
						'pbm_2fa_mng_url'       => 'https://api.passbyme.com/register',
						'pbm_2fa_proxy_url'     => '',
						'pbm_2fa_proxy_port'    => '',
						'pbm_2fa_proxy_pwd'     => ''
					)
				);
				if ( $type === 'app' ) {
					$loader->addOptions(
						array(
							'pbm_2fa_application_certificate' => $savedFile,
							'pbm_2fa_application_pwd'         => $this->aesEncrypt( $certPwd ),
						)
					);

				} else if ( $type === 'mng' ) {
					$loader->addOptions(
						array(
							'pbm_2fa_management_certificate' => $savedFile,
							'pbm_2fa_management_pwd'         => $this->aesEncrypt( $certPwd ),
						)
					);
				} else {
					throw new \Exception( 'Invalid type parameter given while uploading certificate file: ' . $type );
				}
			} else {
				throw new \Exception( 'Certificate password input is missing!' );
			}
		} else {
			/**
			 * Error generated by _wp_handle_upload()
			 * @see _wp_handle_upload() in wp-Admin/Includes/file.php
			 */
			throw new \Exception( $moveFile['error'] );
		}

		return true;
	}

	public function setMainMenu( $title, $name, $pageId, $visibility, $callback ) {
		add_menu_page(
			$title,
			$name,
			$visibility,
			$pageId,
			$callback,
			plugins_url( 'passbyme-two-factor-authentication/static/img/pbm-icon.png' ),
			80
		);

		return $this;
	}

	public function setSubMenu( $pageId, $visibility, $subMenus ) {
		foreach ( $subMenus as $subMenu ) {
			if ( $subMenu['visibility'] ) {
				add_submenu_page(
					$pageId,
					$subMenu['title'],
					$subMenu['name'],
					$visibility,
					$subMenu['pageId'],
					$subMenu['callback']
				);
			}
		}
	}

	public function hasDevice( $oid ) {
		$pbm     = $this->initManagement();
		$devices = $pbm->getUserDevices( $oid );
		if ( ! isset( $devices->data[0]->deviceType ) ) {
			$result = false;
		} else {
			$result = true;
		}

		return $result;
	}

	public function isPbmUser( $oid ) {
		$pbm = $this->initManagement();
		if ( $oid ) {
			$ret = $pbm->getUser( $oid );
		} else {
			$ret = null;
		}

		return $ret;
	}

	public function initManagement() {
		return new Management();
	}

	private function pbmErrorHandler( $errorCode ) {
		switch ( $errorCode ) {
			case 'PRICING_LIMIT_USER':
			case 'PRICING_LIMIT':
			case 'PRICING_LIMIT_ADMIN':
				throw new \Exception( 'You have exceeded the maximum number of users!' );
			case 'NOT_FOUND':
				throw new \Exception( 'Data not found!' );
			case 'CERTIFICATE_REVOKED':
				throw new \Exception( 'Certificate revoked!' );
			case 'FORBIDDEN':
				throw new \Exception( 'Forbidden command!' );
			case 'SUBSCRIPTION_EXPIRED':
				throw new \Exception( 'Expired subscription!' );
			case 'SERVICE_UNAVAILABLE':
				throw new \Exception( 'Service is unavailable! Try again later!' );
			case 'UNSUPPORTED_API_VERSION':
				throw new \Exception( 'The version of your API is out of date!' );
			case 'USER_DISABLED':
				throw new \Exception( 'User disabled! Authentication is not possible!' );
			case 'MALFORMED_INPUT':
				throw new \Exception( 'Invalid input parameters given!' );
			case 'NOT_SUBSCRIBED_TO_SERVICE':
				throw new \Exception( 'Not subscribed to service!' );
			case 'ALREADY_EXISTS':
				throw new \Exception( 'User identifier is already in use! Create a new ID or delete the existing ID from the PassBy[ME] system!' );
			default:
				break;
		}
	}

	private function sendEnrollment( $userOid ) {
		$pbm        = $this->initManagement();
		$enrollment = $pbm->createEnrollment( $userOid );
		if ( $pbm->isError() ) {
			$this->pbmErrorHandler( $pbm->getErrorCode() );
		} else {
			$pbm->sendEnrollmentInEmail( $userOid, $enrollment->enrollmentId );
			if ( $pbm->isError() ) {
				$this->pbmErrorHandler( $pbm->getErrorCode() );
			}
		}

		return true;
	}

	public function addUserToPBM( $wpUserObj ) {
		$pbm     = $this->initManagement();
		$newUser = $pbm->createUser( $wpUserObj->user_email, $wpUserObj->user_email, $wpUserObj->user_nicename );
		if ( $pbm->isError() ) {
			$this->pbmErrorHandler( $pbm->getErrorCode() );
		} else {
			$this->sendEnrollment( $newUser->oid );
		}
		$oid = $newUser->oid;
		update_user_meta( $wpUserObj->id, 'pbm_2fa_user_oid', $oid );

		return true;
	}

	private function hasActiveEnrollment( $oid ) {
		$pbm         = $this->initManagement();
		$enrollments = $pbm->getListOfEnrollments( $oid );
		$result      = false;
		if ( is_array( $enrollments->data ) ) {
			foreach ( $enrollments->data as $enrollment ) {
				if ( $enrollment->state == 'ACTIVE' ) {
					$result = true;
					break;
				}
			}
		} else {
			throw new \Exception( 'Unexpected enrollment data from PassBy[ME]!' );
		}

		return $result;
	}

	public function isCertSet( $wpPbmOption ) {
		if ( ! get_option( $wpPbmOption ) ) {
			return false;
		} else {
			$cert = get_option( $wpPbmOption );
			if ( ! ( is_file( $cert ) ) ) {
				delete_option( $wpPbmOption );

				return false;
			}
		}

		return $cert;
	}

	private function getUserStatus( $user ) {
		$oid       = get_user_meta( $user->id, 'pbm_2fa_user_oid' )[0];
		$isPbmUser = $this->isPbmUser( $oid );
		if ( ! isset( $isPbmUser->oid ) ) {
			$status = 'no_user';
			delete_user_meta( $user->id, 'pbm_2fa_user_oid' );
		} else {
			$hasDevice = $this->hasDevice( $oid );
			if ( $hasDevice ) {
				if ( get_user_meta( $user->id, 'pbm_2fa_authentication' )[0] == '1' ) {
					$status = 'active';
				} else {
					$status = 'inactive';
				}
			} else {
				if ( isset( $isPbmUser->oid ) ) {
					if ( $this->hasActiveEnrollment( $oid ) ) {
						$status = 'enrolling';
					} else {
						$status = 'no_device';
					}
				} else {
					throw new \Exception( 'Cannot find user identifier!' );
				}
			}
		}

		return $status;
	}

	public function setUsersStatus( $usersObj, $isReload ) {
		$response = array();
		$users    = json_decode( $usersObj );
		if ( is_object( $users ) ) {
			$auth = '0';
			foreach ( $users as $user ) {
				$status = $this->getUserStatus( $user );
				if ( $isReload ) {
					switch ( $status ) {
						case 'no_user':
						case 'enrolling':
						case 'inactive':
							$auth = '0';
							break;
						default:
							$auth = '1';
							break;
					}
				} else {
					switch ( $status ) {
						case 'active':
							$status = 'inactive';
							break;
						case 'no_user':
							$this->addUserToPBM( $user );
							$status = $this->getUserStatus( $user );
							break;
						case 'inactive':
							$status = 'active';
							$auth   = '1';
							break;
						case 'no_device':
							$oid = get_user_meta( $user->id, 'pbm_2fa_user_oid' )[0];
							$this->sendEnrollment( $oid );
							$status = $this->getUserStatus( $user );
							$auth   = '1';
							break;
						default:
							break;
					}
				}
				update_user_meta( $user->id, 'pbm_2fa_user_status', $status );
				update_user_meta( $user->id, 'pbm_2fa_authentication', $auth );

				$response['data'][] = array( 'id' => $user->id, 'status' => $status, 'authentication' => $auth );
			}
		} else {
			throw new \Exception( 'Json decode failed!' );
		}

		return $response;
	}

	public function createHTML( $icon, $title, $content ) {
		?>
        <div class="wrap">
            <div class="welcome-panel">
                <div class="welcome-panel-content">
                    <h2>
                        <span class="glyphicon <?php print $icon; ?>"></span>
                        <span class="pbm_page_title"><?php print $title; ?></span>
                    </h2>
                    <hr class="title-hr">
					<?php
					$content();
					?>
                </div>
            </div>
        </div>
		<?php
	}

	private function testAuthConnection() {
		$auth = new Messaging();
		$auth->authorizationMessage();
	}

	private function testMngConnection() {
		$mng = $this->initManagement();
		$mng->getOrganization();
	}

	public function inputRules() {
		$numericOrEmpty = array(
			'filter'  => FILTER_CALLBACK,
			'options' => function ( $input ) {
				if ( is_numeric( $input ) or $input === '' ) {
					return $input;
				} else {
					return false;
				}
			}
		);
		$urlOrEmpty     = array(
			'filter'  => FILTER_CALLBACK,
			'options' => function ( $input ) {
				$filter = filter_var( $input, FILTER_SANITIZE_STRING );
				if ( $input === '' or $filter ) {
					return $input;
				} else {
					return false;
				}
			}
		);

		$rules = array(
			'pbm_message_title' => array(
				'validation' => FILTER_SANITIZE_STRING,
				'wp_option'  => 'pbm_2fa_message_title',
				'input_name' => 'title'
			),
			'pbm_message'       => array(
				'validation' => FILTER_SANITIZE_STRING,
				'wp_option'  => 'pbm_2fa_message',
				'input_name' => 'message'
			),
			'pbm_timeout'       => array(
				'validation' => array(
					'filter'  => FILTER_VALIDATE_INT,
					'options' => array( 'min_range' => 10, 'max_range' => 120 )
				),
				'wp_option'  => 'pbm_2fa_timeout',
				'input_name' => 'timeout'
			),
			'pbm_auth_url'      => array(
				'validation' => FILTER_VALIDATE_URL,
				'wp_option'  => 'pbm_2fa_auth_url',
				'input_name' => 'authentication url'
			),
			'pbm_mng_url'       => array(
				'validation' => FILTER_VALIDATE_URL,
				'wp_option'  => 'pbm_2fa_mng_url',
				'input_name' => 'management url'
			),
			'pbm_proxy_url'     => array(
				'validation' => $urlOrEmpty,
				'wp_option'  => 'pbm_2fa_proxy_url',
				'input_name' => 'proxy url'
			),
			'pbm_proxy_port'    => array(
				'validation' => $numericOrEmpty,
				'wp_option'  => 'pbm_2fa_proxy_port',
				'input_name' => 'proxy port'
			),
			'pbm_proxy_pwd'     => array(
				'validation' => FILTER_SANITIZE_STRING,
				'wp_option'  => 'pbm_2fa_proxy_pwd',
				'input_name' => 'proxy password'
			)
		);

		return $rules;
	}

	public function getValidationRules( $rules ) {
		$validation = array();
		foreach ( $rules as $key => $value ) {
			$validation[ $key ] = $value['validation'];
		}

		return $validation;
	}

	public function validateInputs( $inputs, $rules ) {
		$validInputs = array();
		foreach ( $inputs as $key => $value ) {
			if ( $value === false ) {
				throw new \Exception( 'Invalid value found in ' . $rules[ $key ]['input_name'] . ' field!' );
			} else {
				$validInputs[ $rules[ $key ]['wp_option'] ] = $value;
			}
		}

		return $validInputs;
	}

	public function testConnection( $inputs ) {
		Config::set( 'auth_url', $inputs['pbm_auth_url'] );
		Config::set( 'mng_url', $inputs['pbm_mng_url'] );
		Config::set( 'curl_proxy', $inputs['pbm_proxy_url'] );
		Config::set( 'curl_proxyport', $inputs['pbm_proxy_port'] );
		Config::set( 'curl_proxyuserpwd', $inputs['pbm_proxy_pwd'] );
		$this->testMngConnection();
		$this->testAuthConnection();

		return true;
	}

	public function getAccountData() {
		$pbm = $this->initManagement();

		return $pbm->getAccountLimitations();
	}

	public function getOrganisationData() {
		$pbm = $this->initManagement();

		return $pbm->getOrganization();
	}
}